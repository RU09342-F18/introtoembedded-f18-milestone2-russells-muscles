#include <msp430.h>
#include <math.h>

unsigned float voltage =0;
unsigned float temp = 0;
unsigned float R=0;
unsigned int x= (3.3/4096);
unsigned int DTemp = 27;
unsigned int RTemp = 0;
unsigned int TempDifference = 0;


void CUART(){
    
    P4SEL |= BIT4+BIT5;
    P3SEL |=BIT3+BIT4;
    UCA0CTL1 |= UCSWRST;
    UCA0CTL1 |=UCSSEL_1;
    UCA0BR0=0x03;
    UCA0BR1=0x00;
    UCA0MCTL |= UCBRS_3 +UCBRF_0;
    UCA0CTL1 &= ~UCSWRST;
    UCA0IE |=UCRXIE;
}
void CHPWM(){
    TA0CTL = TASSEL_2 + MC_1 + ID_1 + TAIE;
    TA0CCR0 = 255;
    
    TA0CTL1 |= OUTMOD_7;
    TA0CCR1 = 0;
}
void CADC(){
    ADC12CTL0 = ADC12SHT02 + ADC12ON;         // Sampling time, ADC12 on
     ADC12CTL1 = ADC12SHP;                     // Use sampling timer
     ADC12IE = 0x01;                           // Enable interrupt
     ADC12CTL0 |= ADC12ENC;
     P6SEL |= 0x01;                            // P6.0 ADC option select
     P1DIR |= 0x01;                            // P1.0 output
     ADC12CTL0 |= ADC12SC;                   // Start sampling/conversion
}
void resetPWM(){
    
    TempDifference = Rtemp - Dtemp;
    if(TempDifference >= 0)
    {
        
      TA0CCR1 = TempDifference * 8;
       
       
    }
    else{
        
      TA0CCR1 = 0;
    
    }
}
int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
  
  CADC();
  Cuart();
  CHPWM();
  
  while (1)
  {

     R = (((ADC12MEM0* x *10000)/(3.3 - ADC12MEM0*x)));
       if (TA0CCR0>15698 && TA0CCR0<5933)//checks if resistance is between 15 degrees and 35degrees
           temp= -0.0022 * R + 47.71;
         else if(TA0CCR0>5933 && TA0CCR0<1919)//checks if resistance is between 40 degrees and 65degrees
             temp= -0.0076 * R + 78.917;
         else // if(TA0CCR0>70 && TA0CCR0<100)//checks if resistance is between 70 degrees and 100degrees
             temp= -0.0275 * R+ 116.24;
       
       Rtemp = (int)temp;
       UCA0TXBUF = Rtemp;
       resetPWM();

    __bis_SR_register(LPM0_bits + GIE);     // LPM0, ADC12_ISR will force exit
    __no_operation();                       // For debugger
  }
}

#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void){
    
    DTemp = UCA0RXBUF;
}

#pragma vector = ADC12_VECTOR
__interrupt void ADC12_ISR(void)

{
  switch(__even_in_range(ADC12IV,34))
  {
  case  6:                                  // Vector  6:  ADC12IFG0
 
      UCA0TXBUF = Rtemp;
      resetPWM();
      
  }
}
#pragma vector=USCI_A0_VECTOR
__interrupt void USCI_A0_ISR(void)
{
  switch(__even_in_range(UCA0IV,4))
  {
  case 0:
      break;                             // Vector 0 - no interrupt
  case 2:                                   // Vector 2 - RXIFG
    while (!(UCA0IFG&UCTXIFG));             // USCI_A0 TX buffer ready?
    UCA1TXBUF = temp;
    break;
  default:
      break;
  }}
